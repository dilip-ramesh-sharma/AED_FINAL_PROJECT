/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.SysAdmin;

import Business.Ecosystem;
import PestControlOrganization.PestControl;
import Role.PestControlAdminRole;
import UserAccounts.UserAccounts;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hi
 */
public class CreatePestControlAdminJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreatePestControlAdminJPanel
     */
    private JPanel workAreaContainer;
    private Ecosystem system;
    UserAccounts userAccounts;
    
    public CreatePestControlAdminJPanel() {
        initComponents();
    }
    
    public CreatePestControlAdminJPanel(JPanel workAreaContainer, Ecosystem system) {
        initComponents();
        this.workAreaContainer = workAreaContainer;
        this.system = system;
        populateTable();
        updateBtn.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        viewBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        deleteBtn = new javax.swing.JButton();
        fieldAdminName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        fieldUsername = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        fieldPassword = new javax.swing.JTextField();
        saveBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        orgTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        jLabel1.setText("PEST CONTROL ADMIN ORGANIZATION");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 80, -1, -1));

        viewBtn.setText("View");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });
        add(viewBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 390, -1, -1));

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        add(updateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 390, -1, -1));

        jLabel2.setText("Admin Name:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 180, -1, -1));

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        add(deleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 390, -1, -1));
        add(fieldAdminName, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 180, 127, -1));

        jLabel3.setText("Username:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 230, -1, -1));
        add(fieldUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 230, 127, -1));

        jLabel4.setText("Password:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 290, -1, -1));
        add(fieldPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, 127, -1));

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        add(saveBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 350, -1, -1));

        orgTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Username", "Password"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orgTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 170, 378, 203));
    }// </editor-fold>//GEN-END:initComponents

    private void populateTable() {
        DefaultTableModel orgTableModel = (DefaultTableModel) orgTable.getModel();
        orgTableModel.setRowCount(0);

        for (UserAccounts user : system.getUserAccountDirectory().getUserAccountDirectory()) {

            if ("Role.PestControlAdminRole".equals(user.getRole().getClass().getName())) {
                Object[] row = new Object[3]; 
                row[0] = user.getName();
                row[1] = user.getUsername();
                row[2] = user.getPassword();
                
                orgTableModel.addRow(row);
            }
            
        }
    }
    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        // TODO add your handling code here:
        String adminName = fieldAdminName.getText();
        String username = fieldUsername.getText();
        String password = fieldPassword.getText();
              
        try {
            if(adminName == null || adminName.isEmpty()){
                throw new NullPointerException("Please Enter Admin Name");   
            }else if(Pattern.matches("^[A-Za-z ]+$", adminName) == false){
                throw new Exception("Please Enter A Valid Name");    
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Please Enter Admin Name");
            return;
        } catch (Exception e){
            JOptionPane.showMessageDialog(null, "Please Enter A Valid Name");
            return;
        }
        
        try {
            if(username == null || username.isEmpty()){
               throw new NullPointerException("Please Enter Username");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Please Enter Username");
            return;  
        }
        
        try { 
            if(password == null || password.isEmpty()){
                throw new NullPointerException("Please Enter a Password");
            }else if(Pattern.matches("^(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z].*[a-z].*[a-z]).{8,}$", password) == false){
                throw new Exception("Password is weak");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Please Enter a Password");
            return;
        }catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Password is weak");
            return;
        }
         
        if (system.getUserAccountDirectory().checkIsUnique(username) == false) {
            JOptionPane.showMessageDialog(null,"Username Already Exists");
        }else{
            

        UserAccounts userAccounts = system.getUserAccountDirectory().createUser(adminName, username, password, null, new PestControlAdminRole());
        PestControl pest = system.getPestControlDirectory().createPestControlOrg(username);

        populateTable();
        
        fieldAdminName.setText("");
        fieldUsername.setText("");
        fieldPassword.setText("");
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = orgTable.getSelectedRow();

        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "No Selections Made");
            return;
        }

        else{
            String username = (String) orgTable.getValueAt(selectedRow, 1);
            String password = (String) orgTable.getValueAt(selectedRow, 2);
            userAccounts = system.getUserAccountDirectory().authenticateUser(username, password);

            fieldAdminName.setText(userAccounts.getName()+"");
            fieldUsername.setText(userAccounts.getUsername()+"");
            fieldPassword.setText(userAccounts.getPassword()+"");

        }

        saveBtn.setEnabled(false);
        deleteBtn.setEnabled(false);
        viewBtn.setEnabled(false);
        updateBtn.setEnabled(true);
    }//GEN-LAST:event_viewBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        String adminName = fieldAdminName.getText();
        String username = fieldUsername.getText();
        String password = fieldPassword.getText();

        try {
            if(adminName == null || adminName.isEmpty()){
                throw new NullPointerException("Name Field Cannot be Empty !!!");
            }else if(Pattern.matches("^[A-Za-z ]+$", adminName) == false){
                throw new Exception("Please Enter a valid Name !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Name Field Cannot be Empty !!!");
            return;
        } catch (Exception e){
            JOptionPane.showMessageDialog(null, "Please Enter a valid Name !!!");
            return;
        }

        try {
            if(username == null || username.isEmpty()){
                throw new NullPointerException("Username Field Cannot be Empty !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Username Field Cannot be Empty !!!");
            return;
        }

        try {
            if(password == null || password.isEmpty()){
                throw new NullPointerException("Password Field Cannot be Empty !!!");
            }else if(Pattern.matches("^(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z].*[a-z].*[a-z]).{8,}$", password) == false){
                throw new Exception("Password is too weak !!!");
            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Password Field Cannot be Empty !!!");
            return;
        }catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Password is too weak !!!");
            return;
        }

        system.getUserAccountDirectory().updateUserAccount(userAccounts, adminName, username, password);
        populateTable();
        saveBtn.setEnabled(true);
        deleteBtn.setEnabled(true);
        viewBtn.setEnabled(true);
        updateBtn.setEnabled(false);
        fieldAdminName.setText("");
        fieldUsername.setText("");
        fieldPassword.setText("");
                                           

    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = orgTable.getSelectedRow();

        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "No Selections Made");
            return;
        }
        else {
            int selBtn = JOptionPane.YES_NO_OPTION;
            int selResult = JOptionPane.showConfirmDialog(null, "Confirm Deletion?", "Warning", selBtn);
            if(selResult == JOptionPane.YES_OPTION){
                String username = (String) orgTable.getValueAt(selectedRow, 1);
                String pwd = (String) orgTable.getValueAt(selectedRow, 2);

                UserAccounts user = system.getUserAccountDirectory().authenticateUser(username, pwd);
                system.getUserAccountDirectory().deleteUser(user);

                system.getPestControlDirectory().deletePestControlOrg(username);
                populateTable();

            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextField fieldAdminName;
    private javax.swing.JTextField fieldPassword;
    private javax.swing.JTextField fieldUsername;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable orgTable;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton updateBtn;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables
}
