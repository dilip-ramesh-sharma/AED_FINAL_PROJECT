/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.BeauticianPanels;

import Beautician.BeauticianWorker;
import Business.Ecosystem;
import Customer.Customer;
import StoreServices.Products;
import StoreServices.Store;
import UserAccounts.UserAccounts;
import WorkQueue.StoreServiceWorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hi
 */
public class PurchaseJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PurchaseJPanel
     */
    
    private JPanel workAreaContainer;
    private Ecosystem ecosystem;
    private UserAccounts userAccount;
    ArrayList<Products> products = new ArrayList<Products>();
    int total=0;

    public PurchaseJPanel(JPanel workAreaContainer, UserAccounts userAccounts, Ecosystem ecosystem) {
        initComponents();
        
        this.workAreaContainer = workAreaContainer;
        this.userAccount = userAccounts;
        this.ecosystem = ecosystem;
        displayStore();
    }

    public PurchaseJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        purchaseBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        requestTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        storeComboBox = new javax.swing.JComboBox();
        viewBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        mobile = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 204));

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Description", "Category", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);

        jLabel1.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        jLabel1.setText("YOUR PURCHASE REQUESTS ");

        purchaseBtn.setText("Purchase");
        purchaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseBtnActionPerformed(evt);
            }
        });

        requestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Description", "Category", "Price"
            }
        ));
        jScrollPane2.setViewportView(requestTable);

        jLabel2.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        jLabel2.setText("PURCHASE PRODUCTS FROM STORE");

        viewBtn.setText("View Products");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Mobile No.:");

        backButton.setBackground(new java.awt.Color(133, 211, 255));
        backButton.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1093, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(storeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(viewBtn)
                        .addGap(0, 845, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(jLabel3)
                .addGap(26, 26, 26)
                .addComponent(mobile, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 805, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(jLabel1)
                                .addGap(170, 170, 170))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(268, 268, 268)
                                .addComponent(purchaseBtn)
                                .addGap(279, 279, 279))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(213, 213, 213)
                    .addComponent(jLabel2)
                    .addContainerGap(536, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(storeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewBtn))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(mobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(purchaseBtn)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(118, 118, 118)
                    .addComponent(jLabel2)
                    .addContainerGap(579, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        // TODO add your handling code here:
        Store store = (Store) storeComboBox.getSelectedItem();
        populateProductTable(store);
    }//GEN-LAST:event_viewBtnActionPerformed

    private void purchaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseBtnActionPerformed
        // TODO add your handling code here:
        String phone = mobile.getText();
         int selectedRow = productTable.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "No Selection Made", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{
        Products prod = (Products)productTable.getValueAt(selectedRow, 0); 
        products.add(prod);
        total = total+prod.getProductAmount();
        Store store = (Store) storeComboBox.getSelectedItem();
        store.buyNewProduct(store.getStoreName(), store.getStoreAddress(), userAccount.getUsername(), products, phone, total);
//        for(Customer cust:ecosystem.getCustomerDirectory().getList()){
//            if(userAccount.getUsername().equals(cust.getCustUsername())){
//                cust.createStoreServiceRequest(store.getStoreName(), store.getStoreAddress(),userAccount.getUsername(), products, phone, total);
//            }
//        }
        for(BeauticianWorker bt:ecosystem.getBeauticianDirectory().getBeauticianList()){
            if(userAccount.getUsername().equals(bt.getBeauticianUsrnme())){
                bt.createStoreServiceRequest(store.getStoreName(), store.getStoreAddress(),userAccount.getUsername(), products, phone, total);
            }
        }
        //public void createStoreServiceRequest(String storeName, String custName, ArrayList<Products> products, String buyerContact, int amountPaid) {
        

        JOptionPane.showMessageDialog(null,"Your purchase is placed Successfully !!!", "Thank You", JOptionPane.PLAIN_MESSAGE);
        }
        populateRequestTable();
        
    }//GEN-LAST:event_purchaseBtnActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        workAreaContainer.remove(this);
        CardLayout layout = (CardLayout) workAreaContainer.getLayout();
        layout.previous(workAreaContainer);
    }//GEN-LAST:event_backButtonActionPerformed

    public void populateRequestTable() {
      
        DefaultTableModel requestTableModel = (DefaultTableModel) requestTable.getModel();
        requestTableModel.setRowCount(0);
        
        ArrayList<BeauticianWorker> beautylist = ecosystem.getBeauticianDirectory().getBeauticianList();
        System.out.println("in1");
        if(beautylist!=null){
            System.out.println("in2");
            for(BeauticianWorker b: beautylist){
            System.out.println(b.getBeauticianName()+"Dilip");
        }
          for (BeauticianWorker b: beautylist) {   
            if (b.getBeauticianUsrnme().equals(userAccount.getUsername())) {
               for(StoreServiceWorkRequest stores:b.getStoreServicesRequestList()){
                Object[] row = new Object[4];
                row[0] = stores;
                row[1] = stores.getStoreName();
                row[2] = stores.getStoreAddress();
                row[3] = stores.getStatus();
                requestTableModel.addRow(row);
               }            
            }  
        }
    }

    }
    
    private void populateProductTable(Store store) {
        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        model.setRowCount(0);
        
            Object[] row = new Object[4];
            for(Products prod:store.getProductList()){
                if(prod.getAmountOpen()==true){
                 row[0] = prod;
                 row[1] = prod.getProductDescription();
                 row[2] = prod.getProductCategory();
                 row[3] = prod.getProductAmount();
                 model.addRow(row);
                }
            }
    }
    
    public void displayStore(){
        storeComboBox.removeAllItems();
        for(Store s: ecosystem.getStoreDirectory().getStoreList()){
                storeComboBox.addItem(s);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField mobile;
    private javax.swing.JTable productTable;
    private javax.swing.JButton purchaseBtn;
    private javax.swing.JTable requestTable;
    private javax.swing.JComboBox storeComboBox;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables
}
